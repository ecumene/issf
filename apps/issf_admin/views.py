import json
import random

from django.contrib.auth.decorators import login_required
from django.contrib.auth import logout
from django.urls import reverse
from django.shortcuts import render, HttpResponse, HttpResponseRedirect
from django.db import connection
from allauth.account.models import EmailAddress
from allauth.account.views import PasswordChangeView


from .models import UserProfile
from issf_base.models import FAQ, FAQCategory, SSFPerson, ISSF_Core, DidYouKnow
from issf_base.utils import get_redirectname
from .forms import ProfileForm


@login_required
def update_profile(request, template_name='issf_admin/user_profile.html'):
    """
    View to update a user's profile.
    """
    # Save changes to profile
    if request.method == "POST":
        saved, response = save_profile(request)
        if saved:
            response = json.dumps({
                'success': 'true',
                'redirectname': 'profile-saved',
                'record': None
            })
            return HttpResponse(response)
        else:
            # # invalidly-formatted email address will land here
            # # send errors back for display...
            return HttpResponse(response)
    # Give user form to update profile
    else:
        user_profile = UserProfile.objects.get(id=request.user.pk)
        profile_form = ProfileForm(instance=user_profile)
        return render(
            request,
            template_name,
            {
                'userName': request.user.username,
                'userForm': profile_form
            }
        )


def save_profile(request):
    """
    Saves changes to a user's profile.
    """
    # save
    profile_form = ProfileForm(data=request.POST, instance=request.user)
    if profile_form.is_valid():
        profile_form.save()
        # check if email address has changed
        if "email" in profile_form.changed_data:
            # also update emailaddress table
            email_address = EmailAddress.objects.get(user=request.user)
            email_address.email = profile_form.data['email']
            email_address.save()
            # # reverify?
            # # this code does not work if atomic requests is true
            # # should go to verification_sent page and force logout

        # update summary and search vector for Who's Who (if exists)
        person_list = SSFPerson.objects.filter(contributor_id=profile_form.instance.id)

        if len(person_list) > 0:
            person = SSFPerson.objects.get(
                contributor_id=profile_form.instance.id)

            # issf_core_id is the instance pk converted to a string. pk is a value that is auto-generated by django
            # Therefore this should be safe from SQL injection

            cursor = connection.cursor()
            cursor.execute('SELECT * FROM person_tsvector_update(' + str(person.issf_core_id) + ')')
            cursor.execute('SELECT * FROM person_summary_update(' + str(person.issf_core_id) + ')')
        return True, None
    else:
        # invalidly-formatted email address will land here
        # send errors back for display...
        errors = profile_form.errors
        response = json.dumps({'success': 'false', 'errors': errors})
        return False, response


def temp(request):
    """
    Unused function that seems to set the password for a set user to 'temp'.
    """
    user_profile = UserProfile.objects.get(id=325)
    user_profile.set_password('temp')
    user_profile.save()
    return render(request, 'issf_admin/verification_successful.html')


def account_verified(request):
    """
    View that notifies a user that their account was verified successfully.
    """
    return render(request, 'issf_admin/verification_successful.html')


def profile_saved(request):
    """
    View that notifies a user that their profile was saved successfully.
    """
    return render(request, 'issf_admin/user_profile_saved.html')


class CustomPasswordChangeView(PasswordChangeView):
    """
    Custom password change view that redirects the user to their profile once the password has been changed.
    """
    success_url = '/accounts/profile/'


custom_password_change = login_required(CustomPasswordChangeView.as_view())


def logout_view(request):
    """
    Custom logout view. Logs out the user, and then redirects them to the front page.
    """
    logout(request)
    return HttpResponseRedirect('/')


def return_google_site_verification(request):
    """
    View that returns Google's site verification key.
    """
    return HttpResponse('google-site-verification: googlee9690f8983b8a350.html', content_type="text/plain")


def return_robots(request):
    """
    View that returns a robots.txt file.
    """
    retstr = 'User-agent: *\r\n'
    retstr = retstr + 'Disallow: /admin/\r\n'
    retstr = retstr + 'Disallow: /accounts/\r\n'
    retstr = retstr + 'Disallow: /djangojs/\r\n'
    retstr = retstr + 'Disallow: /frontend/\r\n'
    retstr = retstr + 'Disallow: /import-who/\r\n'
    retstr = retstr + 'Disallow: /details/report-pdf/\r\n'
    return HttpResponse(retstr, content_type="text/plain")


def contributed_records(request):
    """
    View that shows the user all the records that they have contributed.
    """
    user = request.user
    records = ISSF_Core.objects.filter(contributor_id=user.id)
    record_items = {}

    for record in records:
        titles = record.core_record_summary.split('<strong>')
        record_title = titles[1].replace('</strong>', '')
        record_url = reverse(
            get_redirectname(record.core_record_type),
            kwargs={'issf_core_id': record.issf_core_id}
        )
        record_items[record_url] = [record_title, record.core_record_type]

    return render(
        request,
        'issf_admin/account/contributed_records.html',
        {'record_items': record_items}
    )


def help_page(request):
    """
    View that renders the help page with a random fact contained within it.
    """
    faqs = FAQ.objects.all()
    categories = FAQCategory.objects.all()

    num_facts = DidYouKnow.objects.count()
    random_index = random.randint(1, num_facts)
    random_fact = DidYouKnow.objects.get(id=random_index)

    return render(
        request,
        'issf_admin/help.html',
        {
            'faqs': faqs,
            'categories': categories,
            'fact': random_fact
        }
    )


def fact_archive(request):
    """
    View that displays the complete list of facts.
    """
    return render(
        request,
        'issf_admin/fact_archive.html',
        {'facts': DidYouKnow.objects.all()}
    )
